{"version":3,"sources":["angular-client-cache.ts"],"names":["ClientCache","ClientCache.StorageType","ClientCache.ClientCacheService","ClientCache.ClientCacheService.constructor","ClientCache.ClientCacheService.set","ClientCache.ClientCacheService.get","ClientCache.ClientCacheService.tryGetSet","ClientCache.ClientCacheService.configure","ClientCache.ClientCacheService.removeAll","ClientCache.ClientCacheService.remove","ClientCache.ClientCacheService.resolveStorageType","ClientCache.ClientCacheService.overrideCacheItem","ClientCache.ClientCacheService.retrieve","ClientCache.ClientCacheService.store","ClientCache.ClientCacheService.prefix","ClientCache.ClientCacheService.hash","ClientCache.factory"],"mappings":"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","file":"angular-client-cache.js","sourceRoot":"D:/dev/angular-client-cache/","sourcesContent":["/* tslint:disable:no-bitwise */\r\n'use strict';\r\n\r\nmodule ClientCache {\r\n    export interface IClientCacheService {\r\n        set(key: string, value: any, storageType?: StorageType): ng.IPromise<any>;\r\n        get<T>(key: string, storageType?: StorageType): T;\r\n        tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T>\r\n        configure(options: IStorageOptions): void;\r\n        remove(key: string, storageType?: StorageType): void;\r\n        removeAll(storageType?: StorageType): void;\r\n    }\r\n\r\n    export interface IStorageOptions {\r\n        storagePrefix?: string;\r\n        useCompression?: boolean;\r\n        storageType?: StorageType;\r\n    }\r\n\r\n    export enum StorageType {\r\n        Local,\r\n        Session,\r\n        All\r\n    }\r\n\r\n    export class ClientCacheService implements IClientCacheService {\r\n\r\n        private options: IStorageOptions = {\r\n            storagePrefix: 'intergen',\r\n            useCompression: false,\r\n            storageType: StorageType.All\r\n        };\r\n\r\n        constructor(private $q: ng.IQService, private $timeout: ng.ITimeoutService) {\r\n        }\r\n\r\n        public set(key: string, value: any, storageType?: StorageType): ng.IPromise<any> {\r\n            if (angular.isUndefined(key)) throw new Error('Argument null exception. Parameter name: key. Function called: set');\r\n            if (angular.isUndefined(value)) throw new Error('Argument null exception. Parameter name: value. Function called: set');\r\n\r\n            var stringValue = value;\r\n            var deffered = this.$q.defer();\r\n\r\n            // Only stringify if json.\r\n            if (angular.isObject(stringValue) || angular.isArray(stringValue) || angular.isNumber(+stringValue || stringValue)) {\r\n                stringValue = angular.toJson(value);\r\n            }\r\n\r\n            this.$timeout(() => {\r\n                var shouldOverride = this.overrideCacheItem(key, stringValue, this.resolveStorageType(storageType));\r\n\r\n                if (shouldOverride) {\r\n                    if (this.options.useCompression) {\r\n                        stringValue = LZString.compressToBase64(stringValue);\r\n                    }\r\n                    this.store(key, stringValue, this.resolveStorageType(storageType));\r\n                }\r\n                deffered.resolve();\r\n            });\r\n            return deffered.promise;\r\n        }\r\n\r\n        public get<T>(key: string, storageType?: StorageType): T {\r\n            if (angular.isUndefined(key)) throw new Error('Argument null exception. Parameter name: key. Function called: get');\r\n\r\n            var stringValue = this.retrieve(key, this.resolveStorageType(storageType));\r\n\r\n            if (angular.isUndefined(stringValue) || stringValue === null) {\r\n                return undefined;\r\n            }\r\n\r\n            if (this.options.useCompression) stringValue = LZString.decompressFromBase64(stringValue);\r\n\r\n            var value;\r\n            try {\r\n                value = angular.fromJson(stringValue);\r\n            } catch (e) {\r\n                value = stringValue;\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        public tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T> {\r\n            var deferred = this.$q.defer();\r\n\r\n            var value = this.get<T>(key, StorageType.All);\r\n            if(!angular.isUndefined(value) && value !== null) {\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) value = objectBuilder(value);\r\n                deferred.resolve(value);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return apiCall().then((response: T) => {\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) response = objectBuilder(response);\r\n                this.set(key, response);\r\n                return response;\r\n            });\r\n        }\r\n\r\n        public configure(options: IStorageOptions) {\r\n            angular.extend(this.options, options);\r\n        }\r\n\r\n        public removeAll(storageType?: StorageType): void {\r\n            storageType = this.resolveStorageType(storageType);\r\n\r\n            switch (storageType) {\r\n                case StorageType.Local:\r\n                    localStorage.clear();\r\n                    break;\r\n                case StorageType.Session:\r\n                    sessionStorage.clear();\r\n                    break;\r\n                default:\r\n                    sessionStorage.clear();\r\n                    localStorage.clear();\r\n            }\r\n        }\r\n\r\n        public remove(key: string, storageType?: StorageType): void {\r\n            key = this.prefix(key);\r\n            storageType = this.resolveStorageType(storageType);\r\n            switch (storageType) {\r\n                case StorageType.Local:\r\n                    localStorage.removeItem(key);\r\n                    break;\r\n                case StorageType.Session:\r\n                    sessionStorage.removeItem(key);\r\n                    break;\r\n                default:\r\n                    sessionStorage.removeItem(key);\r\n                    localStorage.removeItem(key);\r\n            }\r\n        }\r\n\r\n        private resolveStorageType(storageType: StorageType) {\r\n            return angular.isUndefined(storageType) ? this.options.storageType : storageType;\r\n        }\r\n\r\n        private overrideCacheItem(key: string, stringValue: string, storageType: StorageType) {\r\n            var itemExist = this.retrieve(key, storageType);\r\n            if (angular.isUndefined(itemExist) || itemExist === null) return true;\r\n            if (this.options.useCompression) itemExist = LZString.decompressFromBase64(itemExist);\r\n            var origionalHash = this.hash(itemExist);\r\n            var newHash = this.hash(stringValue);\r\n            return origionalHash !== newHash;\r\n        }\r\n\r\n        private retrieve(key: string, storageType: StorageType): string {\r\n            key = this.prefix(key);\r\n\r\n            switch (storageType) {\r\n                case StorageType.Local:\r\n                    return localStorage.getItem(key);\r\n\r\n                case StorageType.Session:\r\n                    return sessionStorage.getItem(key);\r\n\r\n                default:\r\n                    var sessionStoreValue = sessionStorage.getItem(key);\r\n                    if (!angular.isUndefined(sessionStorage)) return sessionStoreValue;\r\n                    return localStorage.getItem(key);\r\n            }\r\n        }\r\n\r\n        private store(key: string, value: string, storageType: StorageType): void {\r\n            key = this.prefix(key);\r\n\r\n            switch (storageType) {\r\n                case StorageType.Local:\r\n                    localStorage.setItem(key, value);\r\n                    break;\r\n\r\n                case StorageType.Session:\r\n                    sessionStorage.setItem(key, value);\r\n                    break;\r\n\r\n                default:\r\n                    localStorage.setItem(key, value);\r\n                    sessionStorage.setItem(key, value);\r\n            }\r\n        }\r\n\r\n        private prefix(key: string) {\r\n            return this.options.storagePrefix + '.' + key;\r\n        }\r\n\r\n        private hash(value: string) {\r\n            var hash = 0, i, chr, len;\r\n            if (value.length === 0) return hash;\r\n            for (i = 0, len = value.length; i < len; i++) {\r\n                chr = value.charCodeAt(i);\r\n                hash = ((hash << 5) - hash) + chr;\r\n                hash |= 0;\r\n            }\r\n            return hash;\r\n        }\r\n    }\r\n\r\n    function factory($q: ng.IQService, $timeout: ng.ITimeoutService): IClientCacheService {\r\n        return new ClientCacheService($q, $timeout);\r\n    }\r\n    factory.$inject = [\r\n        '$q',\r\n        '$timeout'\r\n    ];\r\n\r\n    angular.module('ClientCache', []);\r\n\r\n    angular\r\n        .module('ClientCache')\r\n        .factory('ClientCacheService', factory);\r\n}"]}