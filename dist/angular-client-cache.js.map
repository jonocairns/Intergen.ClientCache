{"version":3,"sources":["angular-client-cache.ts"],"names":[],"mappings":"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","file":"angular-client-cache.js","sourcesContent":["/* tslint:disable:no-bitwise */\r\n'use strict';\r\n// var angular: any = angular || {};\r\n// var LZString: any = LZString || {};\r\n\r\nmodule ClientCache {\r\n    export interface IClientCacheService {\r\n        set(key: string, value: any): void;\r\n        get<T>(key: string): T;\r\n        tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T>;\r\n        configure(options: IStorageOptions): void;\r\n        remove(key: string): void;\r\n        removeAll(): void;\r\n    }\r\n\r\n    export interface IStorageOptions {\r\n        storagePrefix?: string;\r\n        useCompression?: boolean;\r\n    }\r\n\r\n    export class ClientCacheService implements IClientCacheService {\r\n\r\n        private options: IStorageOptions;\r\n        private sessionCache: ng.ICacheObject;\r\n        constructor(private $q: ng.IQService, private $cacheFactory: ng.ICacheFactoryService) {\r\n          this.options = {\r\n              storagePrefix: 'client-cache',\r\n              useCompression: false\r\n          };\r\n          this.sessionCache = $cacheFactory(this.options.storagePrefix);\r\n        }\r\n\r\n        public set(key: string, value: any): void {\r\n            if (angular.isUndefined(key) || key === null) {\r\n              throw new Error('Argument null exception. Parameter name: key. Function called: set');\r\n            }\r\n            if (angular.isUndefined(value) || value === null) {\r\n              throw new Error('Argument null exception. Parameter name: value. Function called: set');\r\n            }\r\n\r\n            key = this.prefix(key);\r\n\r\n            var stringValue = value;\r\n\r\n            // Only stringify if json.\r\n            if (angular.isObject(stringValue) || angular.isArray(stringValue) || angular.isNumber(+stringValue || stringValue)) {\r\n                stringValue = angular.toJson(value);\r\n            }\r\n\r\n            this.sessionCache.put(key, stringValue);\r\n\r\n            var shouldOverride = this.overrideCacheItem(key, stringValue);\r\n\r\n            if (shouldOverride) {\r\n                if (this.options.useCompression) {\r\n                    stringValue = LZString.compressToUTF16(stringValue);\r\n                }\r\n                localStorage.setItem(key, stringValue);\r\n            }\r\n        }\r\n\r\n        public get<T>(key: string): T {\r\n            if (angular.isUndefined(key) || key === null) {\r\n              throw new Error('Argument null exception. Parameter name: key. Function called: get');\r\n            }\r\n\r\n            key = this.prefix(key);\r\n            var stringValue = this.sessionCache.get(key);\r\n\r\n            if (!angular.isUndefined(stringValue) && stringValue !== null) {\r\n                return this.parse(stringValue);\r\n            } else {\r\n                stringValue = localStorage.getItem(key);\r\n            }\r\n\r\n            if (angular.isUndefined(stringValue) || stringValue === null) {\r\n                return undefined;\r\n            }\r\n\r\n            if (this.options.useCompression) {\r\n              stringValue = LZString.decompressFromUTF16(stringValue);\r\n            }\r\n\r\n            return this.parse(stringValue);\r\n        }\r\n\r\n        public tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T> {\r\n            var deferred = this.$q.defer();\r\n            key = this.prefix(key);\r\n            var value = this.sessionCache.get(key);\r\n\r\n            if(!angular.isUndefined(value) && value !== null) {\r\n                this.set(key, value);\r\n                value = this.parse(value);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) {\r\n                  value = objectBuilder(value);\r\n                }\r\n                deferred.resolve(value);\r\n                return deferred.promise;\r\n            }\r\n            /* istanbul ignore next */\r\n            return apiCall().then((response: T) => {\r\n                this.set(key, response);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) {\r\n                  response = objectBuilder(response);\r\n                }\r\n                return response;\r\n            }, () => {\r\n                // fallback to localStorage if API call fails\r\n                var value = this.get(key);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) {\r\n                  value = objectBuilder(value);\r\n                }\r\n                return value;\r\n            });\r\n        }\r\n\r\n        public configure(options: IStorageOptions) {\r\n            angular.extend(this.options, options);\r\n            if(angular.isDefined(options.storagePrefix) && options.storagePrefix !== null) {\r\n                this.sessionCache.destroy();\r\n                this.sessionCache = this.$cacheFactory(options.storagePrefix);\r\n            }\r\n        }\r\n\r\n        public removeAll(): void {\r\n            localStorage.clear();\r\n            this.sessionCache.removeAll();\r\n        }\r\n\r\n        public remove(key: string): void {\r\n            key = this.prefix(key);\r\n            localStorage.removeItem(key);\r\n            this.sessionCache.remove(key);\r\n        }\r\n\r\n        private parse(stringValue: string): any {\r\n          var value;\r\n          try {\r\n              value = angular.fromJson(stringValue);\r\n          } catch (e) {\r\n              value = stringValue;\r\n          }\r\n          return value;\r\n        }\r\n\r\n        private overrideCacheItem(key: string, stringValue: string) {\r\n            var itemExist = localStorage.getItem(this.prefix(key));\r\n            if (angular.isUndefined(itemExist) || itemExist === null) {\r\n              return true;\r\n            }\r\n            if (this.options.useCompression) {\r\n\t\t\t\titemExist = LZString.decompressFromUTF16(itemExist);\r\n            }\r\n            var originalHash = this.hash(itemExist);\r\n            var newHash = this.hash(stringValue);\r\n            return originalHash !== newHash;\r\n        }\r\n\r\n        private prefix(key: string) {\r\n            return this.options.storagePrefix + '.' + key;\r\n        }\r\n\r\n        private hash(value: string) {\r\n            var hash = 0, i, chr, len;\r\n            if (value.length === 0) return hash;\r\n            for (i = 0, len = value.length; i < len; i++) {\r\n                chr = value.charCodeAt(i);\r\n                hash = ((hash << 5) - hash) + chr;\r\n                hash |= 0;\r\n            }\r\n            return hash;\r\n        }\r\n    }\r\n\r\n    function factory($q: ng.IQService, $cacheFactory: ng.ICacheFactoryService): IClientCacheService {\r\n        return new ClientCacheService($q, $cacheFactory);\r\n    }\r\n    factory.$inject = [\r\n        '$q',\r\n        '$cacheFactory'\r\n    ];\r\n\r\n    angular.module('ClientCache', []);\r\n\r\n    angular\r\n        .module('ClientCache')\r\n        .factory('ClientCacheService', factory);\r\n}\r\n"]}