{"version":3,"sources":["angular-client-cache.ts"],"names":["ClientCache","ClientCache.ClientCacheService","ClientCache.ClientCacheService.constructor","ClientCache.ClientCacheService.set","ClientCache.ClientCacheService.get","ClientCache.ClientCacheService.tryGetSet","ClientCache.ClientCacheService.configure","ClientCache.ClientCacheService.removeAll","ClientCache.ClientCacheService.remove","ClientCache.ClientCacheService.parse","ClientCache.ClientCacheService.overrideCacheItem","ClientCache.ClientCacheService.prefix","ClientCache.ClientCacheService.hash","ClientCache.factory"],"mappings":"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","file":"angular-client-cache.js","sourceRoot":"D:/DEV/angular-client-cache/","sourcesContent":["/* tslint:disable:no-bitwise */\r\n'use strict';\r\n\r\nmodule ClientCache {\r\n    export interface IClientCacheService {\r\n        set(key: string, value: any): void;\r\n        get<T>(key: string): T;\r\n        tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T>;\r\n        configure(options: IStorageOptions): void;\r\n        remove(key: string): void;\r\n        removeAll(): void;\r\n    }\r\n\r\n    export interface IStorageOptions {\r\n        storagePrefix?: string;\r\n        useCompression?: boolean;\r\n    }\r\n\r\n    export class ClientCacheService implements IClientCacheService {\r\n\r\n        private options: IStorageOptions;\r\n        private sessionCache: ng.ICacheObject;\r\n\r\n        constructor(private $q: ng.IQService, private $cacheFactory: ng.ICacheFactoryService) {\r\n          this.options = {\r\n              storagePrefix: 'intergen',\r\n              useCompression: false\r\n          };\r\n          this.sessionCache = $cacheFactory(this.options.storagePrefix);\r\n        }\r\n\r\n        public set(key: string, value: any): void {\r\n            if (angular.isUndefined(key)) throw new Error('Argument null exception. Parameter name: key. Function called: set');\r\n            if (angular.isUndefined(value)) throw new Error('Argument null exception. Parameter name: value. Function called: set');\r\n            key = this.prefix(key);\r\n\r\n            var stringValue = value;\r\n\r\n            // Only stringify if json.\r\n            if (angular.isObject(stringValue) || angular.isArray(stringValue) || angular.isNumber(+stringValue || stringValue)) {\r\n                stringValue = angular.toJson(value);\r\n            }\r\n\r\n            this.sessionCache.put(key, stringValue);\r\n\r\n            var shouldOverride = this.overrideCacheItem(key, stringValue);\r\n\r\n            if (shouldOverride) {\r\n                if (this.options.useCompression) {\r\n                    stringValue = LZString.compress(stringValue);\r\n                }\r\n                localStorage.setItem(key, stringValue);\r\n            }\r\n        }\r\n\r\n        public get<T>(key: string): T {\r\n            if (angular.isUndefined(key)) throw new Error('Argument null exception. Parameter name: key. Function called: get');\r\n            key = this.prefix(key);\r\n            var stringValue = this.sessionCache.get(key);\r\n\r\n            if (!angular.isUndefined(stringValue) && stringValue !== null) {\r\n                return this.parse(stringValue);\r\n            } else {\r\n                stringValue = localStorage.getItem(key);\r\n            }\r\n\r\n            if (angular.isUndefined(stringValue) || stringValue === null) {\r\n                return undefined;\r\n            }\r\n\r\n            if (this.options.useCompression) stringValue = LZString.decompress(stringValue);\r\n\r\n            return this.parse(stringValue);\r\n        }\r\n\r\n        public tryGetSet<T>(key: string, apiCall: Function, objectBuilder?: Function): ng.IPromise<T> {\r\n            var deferred = this.$q.defer();\r\n            key = this.prefix(key);\r\n            var value = this.sessionCache.get(key);\r\n\r\n            if(!angular.isUndefined(value) && value !== null) {\r\n                this.set(key, value);\r\n                value = this.parse(value);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) value = objectBuilder(value);\r\n                deferred.resolve(value);\r\n                return deferred.promise;\r\n            }\r\n\r\n            return apiCall().then((response: T) => {\r\n                this.set(key, response);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) response = objectBuilder(response);\r\n                return response;\r\n            }, () => {\r\n                // fallback to localStorage if API call fails\r\n                var value = this.get(key);\r\n                if(!angular.isUndefined(objectBuilder) && objectBuilder !== null) value = objectBuilder(value);\r\n                return value;\r\n            });\r\n        }\r\n\r\n        public configure(options: IStorageOptions) {\r\n            angular.extend(this.options, options);\r\n            if(angular.isDefined(options.storagePrefix) && options.storagePrefix !== null) {\r\n                this.sessionCache.destroy();\r\n                this.sessionCache = this.$cacheFactory(options.storagePrefix);\r\n            }\r\n        }\r\n\r\n        public removeAll(): void {\r\n            localStorage.clear();\r\n            this.sessionCache.removeAll();\r\n        }\r\n\r\n        public remove(key: string): void {\r\n            key = this.prefix(key);\r\n            localStorage.removeItem(key);\r\n            this.sessionCache.remove(key);\r\n        }\r\n\r\n        private parse(stringValue: string): any {\r\n          var value;\r\n          try {\r\n              value = angular.fromJson(stringValue);\r\n          } catch (e) {\r\n              value = stringValue;\r\n          }\r\n          return value;\r\n        }\r\n\r\n        private overrideCacheItem(key: string, stringValue: string) {\r\n            var itemExist = localStorage.getItem(this.prefix(key));\r\n            if (angular.isUndefined(itemExist) || itemExist === null) return true;\r\n            if (this.options.useCompression) itemExist = LZString.decompress(itemExist);\r\n            var origionalHash = this.hash(itemExist);\r\n            var newHash = this.hash(stringValue);\r\n            return origionalHash !== newHash;\r\n        }\r\n\r\n        private prefix(key: string) {\r\n            return this.options.storagePrefix + '.' + key;\r\n        }\r\n\r\n        private hash(value: string) {\r\n            var hash = 0, i, chr, len;\r\n            if (value.length === 0) return hash;\r\n            for (i = 0, len = value.length; i < len; i++) {\r\n                chr = value.charCodeAt(i);\r\n                hash = ((hash << 5) - hash) + chr;\r\n                hash |= 0;\r\n            }\r\n            return hash;\r\n        }\r\n    }\r\n\r\n    function factory($q: ng.IQService, $cacheFactory: ng.ICacheFactoryService): IClientCacheService {\r\n        return new ClientCacheService($q, $cacheFactory);\r\n    }\r\n    factory.$inject = [\r\n        '$q',\r\n        '$cacheFactory'\r\n    ];\r\n\r\n    angular.module('ClientCache', []);\r\n\r\n    angular\r\n        .module('ClientCache')\r\n        .factory('ClientCacheService', factory);\r\n}\r\n"]}